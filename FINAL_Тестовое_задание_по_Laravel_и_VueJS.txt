Тестовое задание по Laravel и VueJS 2.x:


--- Laravel:

Необходимо создать простое REST API на основе фреймворка Laravel для управления проектами и задачами со следующей структурой моделей:

- Стандартный Пользователь Ларавел User
	-- Проект Project
		--- Задача Task

Поля модели Проекта Project:
	1. id
	2. name (string, не пустое)
	3. description (text, необязательное, по-умолчанию пустое)
	4. user_id (ссылается на ID пользователя, обязательное, не пустое)

Поля модели Задачи Task:
	1. id
	2. name (string, не пустое)
	3. description (text, необязательное, по-умолчанию пустое)
	4. user_id (ссылается на ID пользователя, обязательное, не пустое)
	5. project_id (ссылается на ID проекта, обязательное, не пустое)
	6. статус (enum, ['backlog', 'wip', 'done', 'canceled'], по-умолчанию = backlog)

Создание структуры моделей в БД нужно выполнить с помощью миграций Laravel.

Нужно реализовать следующие методы API для управления этими моделями:
	
	[GET] /api/user/{id}
		отдаёт JSON объект пользователя c ID = {id}, без поля "пароль"

	[GET] /api/user/{id}/projects
		принимает GET параметр search

		отдаёт массив моделей проектов пользователя. Если передан GET параметр search - дополнительно фильтрует проекты по вхождению искомой строки search в названии проекта

	[GET] /api/projects/{id}
		отдёт JSON объект проекта с ID = {id}, со списком всех задач относящихся к проекту

	[POST] /api/projects
		Принимает параметры 
			user_id, (обязательный, валидный)
			name, (обязательный)
			description (необязательный)

		Создаёт и возвращает объект нового проекта с переданными параметрами, либо ошибку валидации (user_id), либо ошибку создания

	[POST] /api/projects/{id}/tasks
		Принимает параметры
			user_id, (обязательный, валидный)
			name, (обязательный)
			description, (необязательный)
			status (необязательный)

		Создаёт и возвращает объект новой задачи привязанной к проекту {id}, либо ошибку валидации (user_id, project_id), либо ошибку создания	

	[DELETE] /api/projects/{id}
		Удаляет проект {id}, возвращает { 'success': true } в случае успеха, либо ошибку

	[DELETE] /api/projects/{id}/tasks/{task_id}
		Удаляет задачу {task_id} в проекте {id}, возвращает { 'success': true } в случае успеха, либо ошибку

Последним шагом необходимо реализовать команду (Laravel Command) CleanUpTasks, с необязательным аргументом --date_lte в формате "YYYY-mm-dd",
 по-умолчанию равный "текущая дата минус 30 дней", которая будет искать и удалять в БД задачи со статусом 'backlog', созданные раньше даты --date_lte. 
Эту команду нужно добавить в расписание Laravel для автоматического выполнения каждый день в 09:45, с записью логов выполнения в /storage/logs/clean-up-tasks.log


--- VueJS:

Реализовать просмотр и управление задачами/проектами пользователя на фронтенде:

- Для управления проектами создать простой компонент ProjectsListComponent.vue. 
	Вверху страницы реализовать простую форму создания нового проекта с полями "Название" (обязательный) и "Описание" (необязательный) и кнопкой "Создать". 
	Запрос на создание проекта отправляется на бэкенд через REST API описаное в разделе "Laravel".
 	После успешного создания новый проект добавляется в начало списка всех проектов пользователя.
 	Под формой создания проектов расположить простой не нумерованный список со всеми текущими проектами пользователя, который загружается один раз при загрузке компонента + после создания нового проекта,
	 так же через REST API на бэкенде. 

Под каждой строкой проекта, с увеличенным отступом слева реализовать вывод списка всех задач в проекте, в формате жирный текст названия задачи,
 и мелкий текст описания под ним (если есть), с возможностью удалить любую из задач (с помощью запроса DELETE /api/projects/{id}/tasks/{task_id}).
 Так же под задачами сделать небольшую форму для создания новой задачи. После успешного удаления/создания задачи реализовать перезагрузку списка
 задач только для затронутого проекта.

Наконец, в самом низу страницы, реализовать вывод последних 3 созданных задач (только название) из любых проектов пользователя,
 без отдельного запроса к бэкенду, с помощью computed свойста, отфильровав их по стандартному полю `created_at`

